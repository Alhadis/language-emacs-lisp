name: "Emacs Lisp"
scopeName: "source.emacs.lisp"
fileTypes: [
	"el"
	"elc"
	"spacemacs"
	"emacs"
	"emacs.desktop"
]
patterns: [include: "#main"]


repository:
	
	# Top-level patterns
	main:
		patterns: [
			{include: "#comment"}
			{include: "#expression"}
			{include: "#definition"}
			{include: "#keyword"}
			{include: "#string"}
			{include: "#quote"}
			{include: "#nil"}
		]
	
	
	# Comment-line
	comment:
		name: "comment.line.semicolon.emacs.lisp"
		begin: ";"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.emacs.lisp"


	# def* statement
	definition:
		patterns: [{
			name: "storage.type.function.emacs.lisp"
			match: "\\bdefun\\b"
		},{
			name: "storage.type.$1.emacs.lisp"
			match: "\\b(?:(?:cl-)?def(advice|class|custom|face|group|package|struct|theme|type|var))\\b"
		},{
			name: "storage.type.$1.emacs.lisp"
			match: "\\b(define-(?:condition|widget))"
		}]


	# S-expression
	expression:
		patterns: [{
			name: "meta.expression.emacs.lisp"
			begin: "\\("
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.section.expression.begin.emacs.lisp"
			endCaptures:   0: name: "punctuation.section.expression.end.emacs.lisp"
			patterns: [include: "$self"]
		},{
			name: "meta.quoted.expression.emacs.lisp"
			begin: "(\\')(\\()"
			end:   "\\)"
			beginCaptures:
				1: name: "punctuation.definition.symbol.emacs.lisp"
				2: name: "punctuation.section.quoted.expression.begin.emacs.lisp"
			endCaptures:
				0: name: "punctuation.section.quoted.expression.end.emacs.lisp"
			patterns: [include: "$self"]
		}]


	# :keywords
	keyword:
		name: "constant.keyword.emacs.lisp"
		match: "(:)[-\\w]+"
		captures:
			1: name: "punctuation.definition.keyword.emacs.lisp"


	# Empty value
	nil:
		name: "constant.language.nil.emacs.lisp"
		match: "\\bnil\\b"



	# Argument-quoting
	quote:
		patterns: [{
			
			# (quote value)
			name: "keyword.control.quote.emacs.lisp"
			match: "\\bquote\\b"
		},{
			
			# 'value
			name: "string.quoted.other.emacs.lisp"
			match: "(')[-\\w]+"
			captures:
				1: name: "punctuation.definition.quote.emacs.lisp"
		}]

	
	# "Double-quoted" string
	string:
		name: "string.quoted.double.emacs.lisp"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.emacs.lisp"
		endCaptures:   0: name: "punctuation.definition.string.end.emacs.lisp"
		patterns: [
			match: '(\\\\).'
			name: "constant.character.escape.emacs.lisp"
			captures:
				1: name: "punctuation.escape.backslash.emacs.lisp"
		]
