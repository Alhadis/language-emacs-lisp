name: "YASnippet"
scopeName: "source.yasnippet"
fileTypes: [
	"yasnippet"
	"yas"
]
firstLineMatch: """(?x)
	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:yasnippet|snippet)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
"""

patterns: [{
	name:  "meta.prologue.yasnippet"
	begin: "\\A(?=\\s*(?:$|#))"
	end:   "(?:^|\\G)(?=\\s*(?:[^\\s#]|#+\\s*--\\s*$))"
	patterns: [include: "#prologue-lines"]
}, include: "#body"]

repository:
	"prologue-lines":
		begin: "^\\s*(#+)(?!\\s*--\\s*$)"
		end: "$"
		beginCaptures:
			1: name: "punctuation.definition.comment.number-sign.yasnippet"
		patterns: [{
			begin: "(?=-\\*-)"
			end:   "$"
			contentName: "comment.line.modeline.yasnippet"
			patterns: [include: "source.emacs.lisp#modeline"]
		}, include: "#directives"]
	
	directives:
		patterns: [{
			# Simple keys
			name:  "meta.directive.snippet-$1.yasnippet"
			match: "(?<=[\\s#])(key|name|group|uuid)\\s*(:)(?:\\s*(\\S.*))?"
			captures:
				1: name: "variable.assignment.$1.yasnippet"
				2: name: "punctuation.separator.dictionary.key-value.colon.yasnippet"
				3: name: "string.unquoted.yasnippet"
		},{
			# Keys which involve embedded lines of Lisp
			name: "meta.directive.snippet-$1.yasnippet"
			match: "(?<=[\\s#])(condition|expand-env)\\s*(:)(?:\\s*(\\S.*))?"
			captures:
				1: name: "variable.assignment.$1.yasnippet"
				2: name: "punctuation.separator.dictionary.key-value.colon.yasnippet"
				3: name: "source.embedded.emacs.lisp", patterns: [include: "source.emacs.lisp"]
		},{
			# Direct keybinding
			name: "meta.directive.keybinding.yasnippet"
			match: "(?<=[\\s#])(binding)\\s*(:)(?:\\s*(\\S.*))?"
			captures:
				1: name: "variable.assignment.$1.yasnippet"
				2: name: "punctuation.separator.dictionary.key-value.colon.yasnippet"
				3: patterns: [include: "source.emacs.lisp#key-notation"]
		},{
			# Type specifier: Command
			begin: "(?<=[\\s#])(type)\\s*(:)(?:\\s*(command))(?=\\s*$)"
			beginCaptures:
				0: name: "meta.directive.type.yasnippet"
				1: name: "variable.assignment.$1.yasnippet"
				2: name: "punctuation.separator.dictionary.key-value.colon.yasnippet"
				3: name: "constant.language.type-specifier.yasnippet"
			end: "(?=A)B"
			patterns: [{
				# Remainder of prologue
				begin: "\\G"
				end:   "^(?=\\s*#+\\s*--\\s*$)"
				patterns: [include: "#prologue-lines"]
			},{
				# Replace usual `#body' rule with embedded Lisp source
				name:  "meta.snippet-body.yasnippet"
				begin: "^\\s*(#+)\\s*(--)\\s*$\\n?"
				end:   "(?=A)B"
				beginCaptures:
					0: name: "comment.line.number-sign.yasnippet"
					1: name: "punctuation.definition.comment.number-sign.yasnippet"
					2: name: "punctuation.terminator.double-dash.yasnippet"
				contentName: "source.embedded.emacs.lisp"
				patterns: [include: "source.emacs.lisp"]
			}]
		},{
			# Type specifier: Anything else
			name:  "meta.directive.type.yasnippet"
			match: "(?<=[\\s#])(type)\\s*(:)(?:\\s*(?!command\\s*$)(\\S.*))"
			captures:
				1: name: "variable.assignment.$1.yasnippet"
				2: name: "punctuation.separator.dictionary.key-value.colon.yasnippet"
				3: name: "constant.language.type-specifier.yasnippet"
		},{
			# Directives that look better rendered with underlines
			name:  "meta.directive.$1.yasnippet"
			match: "(?<=[\\s#])(contributor|atom-description-more-url)\\s*(:)(?:\\s*(\\S.*))"
			captures:
				1: name: "variable.assignment.$1.yasnippet"
				2: name: "punctuation.separator.dictionary.key-value.colon.yasnippet"
				3: patterns: [{
					# URL
					contentName: "constant.other.reference.link"
					begin: "(?:^|\\G)\\s*(?=(?:[a-z][-+a-z0-9]*:\\S))"
					end:   "\\s|$"
				},{
					# Author <email@address>
					match: "([^\\s<>,](?:[^\\s<>,]|\\s[^<>,])*+)(?:\\s+((<)([^@>\\s]+@[^<>@\\s]+)(>)))?"
					captures:
						1: name: "entity.name.author.yasnippet"
						2: name: "meta.email-address.yasnippet"
						3: name: "punctuation.definition.bracket.angle.begin.yasnippet"
						4: name: "constant.other.reference.link.underline.email.yasnippet"
						5: name: "punctuation.definition.bracket.angle.end.yasnippet"
				},{
					# <email@address>
					name: "meta.email-address.yasnippet"
					match: "(<)([^@>\\s]+@[^<>@\\s]+)(>)"
					captures:
						1: name: "punctuation.definition.bracket.angle.begin.yasnippet"
						2: name: "constant.other.reference.link.underline.email.yasnippet"
						3: name: "punctuation.definition.bracket.angle.end.yasnippet"
				},{
					# E-mail separators
					name: "punctuation.separator.comma.yasnippet"
					match: ","
				}]
		},{
			# Miscellaneous directives
			name: "meta.directive.other.yasnippet"
			match: "(?<=[\\s#])([^:\\s#]+)\\s*(:)(?:\\s*(\\S.*))?"
			captures:
				1: name: "variable.assignment.custom.yasnippet"
				2: name: "punctuation.separator.dictionary.key-value.colon.yasnippet"
				3: name: "string.unquoted.yasnippet"
		}]

	
	body:
		name:  "meta.snippet-body.yasnippet"
		begin: "^\\s*((#+)\\s*(--)\\s*$\\n?|(?=[^\\s#]))"
		end:   "(?=A)B"
		beginCaptures:
			1: name: "comment.line.number-sign.yasnippet"
			2: name: "punctuation.definition.comment.number-sign.yasnippet"
			3: name: "punctuation.terminator.double-dash.yasnippet"
		patterns: [
			{include: "#tab-stops"}
			{include: "#indentation-marker"}
			{include: "#placeholder-fields"}
			{include: "#escaped-characters"}
			{include: "#embedded-lisp"}
		]
		
	"tab-stops":
		name: "variable.positional.$2-nth.tab-stop.yasnippet"
		match: "(\\$)([0-9]+)"
		captures:
			1: name: "punctuation.definition.variable.sigil.dollar-sign.yasnippet"
	
	"indentation-marker":
		name: "keyword.operator.indentation-marker.yasnippet"
		match: "(\\$)>"
		captures:
			1: name: "punctuation.definition.variable.sigil.dollar-sign.yasnippet"

	"escaped-characters":
		patterns: [{
			# Escaped backslash
			name: "constant.character.escape.backslash.yasnippet"
			match: "(\\\\)\\\\"
			captures:
				1: name: "punctuation.definition.escape.yasnippet"
		},{
			# \$
			name: "constant.character.escape.dollar-sign.yasnippet"
			match: "(\\\\)\\$"
			captures:
				1: name: "punctuation.definition.escape.yasnippet"
		},{
			# \`
			name: "constant.character.escape.backtick.yasnippet"
			match: "(\\\\)`"
			captures:
				1: name: "punctuation.definition.escape.yasnippet"
		}]

	"embedded-lisp":
		name:  "string.interpolated.yasnippet"
		begin: "`"
		end:   "`"
		contentName: "source.embedded.emacs.lisp"
		patterns: [include: "source.emacs.lisp"]
		beginCaptures: 0: name: "punctuation.section.begin.embedded.yasnippet"
		endCaptures:   0: name: "punctuation.section.end.embedded.yasnippet"


	"placeholder-fields":
		patterns: [
			{include: "#numbered-placeholder"}
			{include: "#unnumbered-placeholder"}
		]
	
	"numbered-placeholder":
		name:  "meta.placeholder-field.numbered.$2-nth.yasnippet"
		begin: "(\\${)([0-9]+)(:)"
		end:   "}"
		beginCaptures:
			1: name: "punctuation.section.embedded.field.begin.yasnippet"
			2: name: "constant.numeric.integer.int.decimal.yasnippet"
			3: name: "punctuation.separator.colon.field.yasnippet"
		endCaptures:
			0: name: "punctuation.section.embedded.field.end.yasnippet"
		contentName: "string.unquoted.default-text.yasnippet"
		patterns: [include: "#placeholder-innards"]

	"unnumbered-placeholder":
		name:  "meta.placeholder-field.unnumbered.yasnippet"
		begin: "(\\${)(:)"
		end:   "}"
		beginCaptures:
			1: name: "punctuation.section.embedded.field.begin.yasnippet"
			2: name: "punctuation.separator.colon.field.yasnippet"
		endCaptures:
			0: name: "punctuation.section.embedded.field.end.yasnippet"
		contentName: "string.unquoted.default-text.yasnippet"
		patterns: [include: "#placeholder-innards"]

	"placeholder-innards":
		patterns: [
			{include: "#escaped-characters"}
			{include: "#embedded-lisp"}
			{include: "#placeholder-fields"}
			
			name:  "meta.transformation.yasnippet"
			begin: "\\${1,2}(?=\\()"
			end:   "(?<=\\))"
			beginCaptures:
				0: name: "keyword.operator.transformation.yasnippet"
			contentName: "source.embedded.emacs.lisp"
			patterns: [include: "source.emacs.lisp"]
		]
