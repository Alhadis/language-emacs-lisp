(cl-loop for X from X to X by X)
(cl-loop for X in X by X)
(cl-loop for X on X by X)
(cl-loop for X in-ref X by X)
(cl-loop for X across X)
(cl-loop for X across-ref X)
(cl-loop for X being the elements of X)
(cl-loop for X being the elements of-ref X)
(cl-loop for X being the symbols of X)
(cl-loop for X being the hash-keys of X)
(cl-loop for X being the hash-values of X)
(cl-loop for X being the key-codes of X)
(cl-loop for X being the key-bindings of X)
(cl-loop for X being the key-seqs of X)
(cl-loop for X being the overlays of X)
(cl-loop for X being the intervals of X)
(cl-loop for X being the frames)
(cl-loop for X being the windows of X)
(cl-loop for X being the buffers)
(cl-loop for X = X then X)

(cl-loop for buf in (buffer-list)
         collect (buffer-file-name buf))

(setq i 'hap)
(cl-loop for i from 1 to 10 do (do-something-with i))
(cl-loop for x to 10 collect x)
(cl-loop for x below 10 collect x)
(cl-loop for x in '(1 2 3 4 5 6) collect (* x x))
(cl-loop for x in '(1 2 3 4 5 6) by 'cddr collect (* x x))
(cl-loop for x on '(1 2 3 4) collect x)
(cl-loop for x on first-animal by 'next-animal collect x)
(cl-loop for x across-ref my-list)
(cl-loop for x in-ref my-list do (cl-incf x))
(cl-loop for x across "aeiou")
(cl-loop for x across-ref "aeiou")
(cl-loop for x being the elements of '(1 2 3 4))
(cl-loop for x being the elements of-ref '(1 2 3 4))
(cl-loop for x being the hash-keys of hash-table)
(cl-loop for x being the hash-values of hash-table)
(cl-loop for x being the key-codes of keymap)
(cl-loop for x being the key-bindings of keymap)
(cl-loop for x being the key-seqs of keymap)
(cl-loop for x being the overlays [of buffer] …)
(cl-loop for x being the intervals [of buffer] …)
(cl-loop for x being the frames)
(cl-loop for x being the windows [of frame])
(cl-loop for x being the buffers)
(cl-loop for x on my-list by 'cddr do …)
(cl-loop for x = my-list then (cddr x) while x do …)
(cl-loop for x = (random) when (> x 0) return x)
(cl-loop for x below 5 for y = nil then x collect (list x y))
(cl-loop for x below 5 and y = nil then x collect (list x y))
(cl-loop for (x y) in '((2 3) (4 5) (6 7)) collect (+ x y))
(cl-loop for (key . value) in '((a . 1) (b . 2))
         collect value)

(cl-loop repeat (1+ n) do …)
(cl-loop for temp to n do …)
(while cond forms…)
(cl-loop while cond do forms…)
  
(cl-loop for sym being the symbols
         when (fboundp sym)
         when (string-match "^map" (symbol-name sym))
         collect sym)


(cl-loop for name in '(fred sue alice joe june)
         for kids in '((bob ken) () () (kris sunshine) ())
         collect name into book
         append kids)
